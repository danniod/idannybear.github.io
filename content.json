[{"title":"实习总结","date":"2017-04-03T03:05:36.000Z","path":"bread/summary/internship/","text":"前言 趁着清明假期，回趟学校，好久不见，你却这么美： 顺便淋一场清明时节的春雨，感受泥土的气息；和着芬香，观赏沾衣带露的花朵。 你说你不知道这是什么花？好吧，我来告诉你：清明节要做什么事？要去什么地方？它开在这地方的什么前？好的，你知道了：这是丁香花！NoNoNo，怎么能这么说呢，我去的不是那种地方&amp;%#$&amp;……% 等等，我是来做总结的！ 总结 毕业实习为大学生观察社会，踏入社会正式工作积累经验与教训的直接途径。同时也是对大学生在校所学知识与技能的检验。 在开发岗位实习，对技能的要求会更高。要求有更高的学习能力与扎实的基础：因为在当今的信息时代，繁衍出太多的编程语言，它们的根源与目标基本是一致的，殊途同归，所以在扎实的基础上习得新的语言、架构会更容易。在这次实习中，我发现自己需要学习的东西还有很多，自己所了解和掌握的，仍只是皮毛，需要潜下心来，慢慢深入；新接触的技术在工作中需求较大，先着手与按需学习，通过知识的学习与实战相结合，可以较快速的理解相关技术，并应用与工作当中。随着对技术的深入，及时检查入手时可能存在的隐患问题，并对代码进行优化重构。 经过这一段时间的实习工作，我清晰的认识到在工作中应该更细心，更耐心，更虚心。开发过程中难免遇到未达预期的错误，即bug：当出现异常时，应当关注异常抛出的具体异常与堆栈等有用的信息用于排错，细心记录，能够避免许多低级的bug出现，当问题比较棘手，一段时间仍未解，及时虚心请教，当然还要注意提问的技巧。从时间成本上看，在相同的时间内，能够有充分的时间完善开发从而保证开发质量。 另一方面，这次毕业实习从侧面检验了我的学习情况和技能水平，培养了我发现问题，分析定位问题与处理问题的能力；同时，更大的收获是发现自己的不足，促使我在今后的学习工作中不断的弥补和提高。通过社会实践，让我亲身体验到社会竞争是激烈的，更是冷酷的，只有努力提升自身技能，才能不被社会所淘汰。 TL;DR 剩下的纯属凑字数交报告了 其实重点在前面","categories":[{"name":"bread","slug":"bread","permalink":"http://dannybear.top/categories/bread/"},{"name":"summary","slug":"bread/summary","permalink":"http://dannybear.top/categories/bread/summary/"}],"tags":[{"name":"实习","slug":"实习","permalink":"http://dannybear.top/tags/实习/"},{"name":"总结","slug":"总结","permalink":"http://dannybear.top/tags/总结/"}]},{"title":"Maven 核心","date":"2017-03-13T09:20:26.000Z","path":"tech/maven/maven-learning/","text":"生命周期（Lifecycle） 生命周期是一组阶段的序列（sequence of phases）每个阶段定义了目标被执行的顺序。 这里的阶段是生命周期的一部分。 Maven有三个标准的生命周期，分别是clean, default, site; 它们是相互独立的 clean phase 说明 pre-clean 在此阶段执行实际项目清除之前所需的操作 clean 删除之前构建生成的所有文件，默认工程下的target目录 post-clean 在此阶段执行实际项目清除之后所需的操作 default 还有一个说法叫做 build，许多博客上这么称呼，但官方文档里并未如此声明。 phase 阶段 说明 process-resources 处理资源 将资源复制并处理到目标目录中，准备打包 compile 编译 编译项目源代码 test 测试 运行单元测试对编译后的代码进行测试 package 打包 将编译的文件分格式（jar/war等）打包，默认输出至target目录 install 安装 将软件包安装到本地仓库中，作为其他项目依赖 这里仅描述了常见常用的几个阶段，所有周期请参见官方文档-Lifecycle site phase 说明 pre-site 在此阶段执行实际站点生成之前所需的操作 site 生成项目的站点文件 post-site 在此阶段执行实际站点生成之前所需的操作 site-deploy 将生成的站点文件部署到指定服务器 eg.:1mvn clean dependency:copy-dependencies package 这里的clean阶段将会被首先执行，然后dependency:copy-dependencies目标会被执行，最终package阶段被执行。 Note: 只有该阶段之前及包括该阶段在内的所有阶段会被执行 目标（Gold） 目标表示一个特定的、对构建和管理工程有帮助的任务。 目标可绑定在构建阶段执行，经过阶段便自动执行。构建阶段可绑定0个到多个；没有绑定任何构建阶段的目标可以在构建生命周期之外被直接调用执。 依赖 &amp; 传递依赖范围（Scepe） 依赖范围用于限制依赖关系的传递性，并影响用于各种构建任务的classpath。 在这之前先来了解一下Maven构建任务时不同阶段使用不同的classpath: compile classpath test classpath runtime classpath Scope 说明 compile (default) 在所有classpath中使用，并传递依赖关系到依赖项目，默认范围 test 正常使用应用程序不需要依赖关系，仅用于测试的编译和运行阶段，不可传递 runtime 它是在运行时和测试classpath使用 provided 表明你期望JDK或一个容器在运行时提供依赖，仅适用于编译和测试classpath，不可传递 system 与provided类似，必须提供明确指定本地jar路径，而不是在仓库中查找 import Maven 2.0.9版本以上，仅支持在&lt;dependencyManagement&gt;部分。替换为指定POM的依赖管理中依赖关系，不参与传递性 依赖传递 compile test provided runtime compile compile runtime test test test provided provided provided runtime runtime runtime Note: 博主浏览到国内许多博客还存在p rovidid-provided的传递，难道是曾经支持？现在Maven2、3的官文“This scope is only available on the compilation and test classpath, and is not transitive.”指出不可传递！详见官方文档-Dependency Scope 可选与排除使用&lt;optional&gt;指定依赖为可选，取消传递性，不再传递该依赖。 1234&lt;denpendcy&gt; ...gruopId artifactId version &lt;optional&gt;true&lt;/optional&gt;&lt;/denpendcy&gt; 使用&lt;exclusions&gt;排除依赖 123456789&lt;denpendcy&gt; ...gruopId artifactId version &lt;exclusions&gt; &lt;exclusion&gt; &lt;!-- 要排除的依赖 --&gt; ...gruopId artifactId &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/denpendcy&gt; 通过配置可选或排除，可避免因依赖冲突触发仲裁需要的包带来的问题。 仲裁机制在工程中显式或隐式声明引用的artifactId和groupId相同而version不同。即引入包冲突。Maven为避免冲突，启用仲裁机制，将重复的包仅引用一个。 那到底引用哪一个呢？ 保留依赖路径短的 eg.（默认compile范围）:12projectA -&gt; projectB -&gt; projectD(X:2.1)projectA -&gt; projectC(X:2.0) X-表示某groupId:artifactId 仲裁掉X的2.1版本，保留2.0版本 依赖路径长度相同，保留声明顺序早的 eg.:12projectA -&gt; projectB -&gt; projectD(X:2.1)projectA -&gt; projectC -&gt; projectE(X:2.0) 则仲裁掉X 2.0版本，保留2.1版本 填坑指南在运行中抛出ClassNotFoundException并确定该类的依赖包已引用，可考虑依赖所需的版本是否被仲裁掉了。 参考：[1] 理解maven的核心概念[2] Maven实战（六）依赖","categories":[{"name":"tech","slug":"tech","permalink":"http://dannybear.top/categories/tech/"},{"name":"maven","slug":"tech/maven","permalink":"http://dannybear.top/categories/tech/maven/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://dannybear.top/tags/maven/"}]},{"title":"MyBatis多数据源配置","date":"2017-02-17T11:02:25.000Z","path":"tech/mybatis/mybatis-datasources-conf/","text":"没想到这么顺利，在项目经理指导下，没有困难的就解决了配置多数据源的问题；完成后却一致没抽出时间给大家分享，现在直接甩出干货吧： 项目背景先简单的交代一下项目背景： MyBatis 持久层框架 C3P0数据库连接池 MySQL &amp; Oracle 数据库 当然，数据库有多种，按照对应的数据库的使用去配置数据源参数，持久层框架和连接池也有多种，基本都是一个套路； 思路这个思路嘛，先想想单个数据源的配置： 配置jdbc需要的driver、url、user、password参数 配置sessionFactory，使用C3P0中间配置dataSource 使用spring整合注入 简单点：db -&gt; dataSource -&gt; sessionFactory -&gt; spring注入 多数据源重复前两个步骤，然后整合注入，so easy 不是么！ 复行数十步，豁然开朗 之前对spring的配置文件也是一头雾水，真的是只有经过一番实战，才会豁然开朗。 具体实现数据库参数便于配置数据库，将参数配置到properties文件（准备多套）db-mysql.properties1234mysql.jdbc.driver=com.mysql.jdbc.Drivermysql.jdbc.url=jdbc:mysql://127.0.0.1:3306/mysqlmysql.jdbc.user=usermysql.jdbc.password=password db-orcl.properties1234orcl.jdbc.driver=oracle.jdbc.driver.OracleDriverorcl.jdbc.url=jdbc:oracle:thin:@192.168.1.2:1521:orclorcl.jdbc.user=userorcl.jdbc.password=passwd 注意：键值对的key不要重复 C3P0连接池接下来都是配置spring的配置文件（篇幅有限，仅贴部分关键配置） 1234567891011&lt;!-- 引入数据库参数properties的参数 --&gt;&lt;context:property-placeholder location=&quot;classpath:db-mysql.properties&quot; ignore-unresolvable=&quot;true&quot;/&gt;&lt;bean id=&quot;mysqlDataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt; &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;mysql.jdbc.driver&#125;&quot;/&gt; &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;mysql.jdbc.url&#125;&quot;/&gt; &lt;property name=&quot;user&quot; value=&quot;$&#123;mysql.jdbc.user&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;mysql.jdbc.password&#125; &lt;!-- c3p0连接池的私有属性 --&gt; ···&lt;/bean&gt; 4·2·3·4·再 来 一 次！ 引入db-orcl.properties，重复工作配置orclDataSource sessionFactorysession是jdbc与数据库通话的连接会话，不同的数据源配置对应的sessionFactory工厂;注意：entity根据包的路径来区分使用不同的session; 12345678910&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;!-- 注入数据库连接池 --&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;mysqlDataSource&quot;/&gt; &lt;!-- 配置MyBatis全局配置文件:mybatis-config.xml --&gt; &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt; &lt;!-- 扫描entity包 使用别名 --&gt; &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.asiainfo.dao.entity&quot;/&gt; &lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:path/to/mapper/*.xml&quot;/&gt;&lt;/bean&gt; 1234&lt;bean id=&quot;orclSessionFactory&quot; ... &lt;property name=&quot;dataSource&quot; ref=&quot;orclDataSource&quot;/&gt; ...&lt;/bean&gt; 注入注入到哪里呢？当然是用的地方——DAO层；观察下面的配置：bean不需要指定id了，但是要指明不同的mapper接口包，所以它是根据哪个包下的接口（实现类根据xml字段注入）使用指定的sessionFactory;123456&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;!-- 注入sqlSessionFactory --&gt; &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt; &lt;!-- 给出需要扫描Dao接口包 --&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.asiainfo.dao&quot;/&gt;&lt;/bean&gt; 123&lt;bean ...&gt; &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;orclSessionFactory&quot;/&gt;&lt;/bean&gt; 好的，到这里已经配置完了多数据源。","categories":[{"name":"tech","slug":"tech","permalink":"http://dannybear.top/categories/tech/"},{"name":"mybatis","slug":"tech/mybatis","permalink":"http://dannybear.top/categories/tech/mybatis/"}],"tags":[{"name":"MyBatis","slug":"MyBatis","permalink":"http://dannybear.top/tags/MyBatis/"},{"name":"多数据源","slug":"多数据源","permalink":"http://dannybear.top/tags/多数据源/"}]},{"title":"开工大吉","date":"2017-02-06T09:09:24.000Z","path":"bread/operation/go-into-operation/","text":"过年好啊，朋友们俗话说： 假期是超越对手最好的时机。 ——出自：不知道哪里 表闹好吗，我怎么可以做出这种偷鸡摸狗的事情呢。 看似漫长的年假就这么在寒冷中一天一天挨过而结束了，嗯！真的啥都没做；成！好吧，大把的时间花在了装hackintosh(黑苹果)系统，尝试多次，并没见到这张美丽的图片。上一次搞这个，还是在学校，时间还算充裕点，然后，然后电脑就正常的去了售后！ 开工啦今天开工了，理了理头绪，继续假前的工作！因项目的需要，现阶段要mysql和oracle两个数据库，作单向数据的同步，最终实现去O; 之前使用了APP Frame，结果也是要去掉的，我却在新项目中整上了，无奈，虽说对APP Frame更熟悉了一点，BUT，现在需要改用mybatis配置多个数据源，根据规则去使用数据源单例操作数据库，完成后再给大家分享一下！ 好吧，貌似有件重要的事没完成，先不说了，趁着沉迷假期，懒散的脑子，为新工作期制定个计划 新目标新年新气象，在这里放一下新目标，绝对不可以拖到下一年 Maven 了解Maven生命周期； 掌握Maven plugin的pom配置； 掌握Maven常用命令； 了解Maven模块与继承； Mybatis 了解Mybatis调用存储过程； 优化xml映射文件； SQL 掌握常用函数、子查询、表连接； 能够读懂复杂的sql语句； SpringMVC 了解拦截器； 掌握注解驱动的控制器，其中包括请求映射、数据绑定；","categories":[{"name":"bread","slug":"bread","permalink":"http://dannybear.top/categories/bread/"},{"name":"operation","slug":"bread/operation","permalink":"http://dannybear.top/categories/bread/operation/"}],"tags":[]},{"title":"step in 2016","date":"2017-01-22T09:20:02.000Z","path":"bread/summary/step-in-2016/","text":"在公司实习已满半载，2016已走完，做一次剖析总结，记录成长，同时也激励自己不断进步。 开发者首先，作为开发，首当其冲的应当是技术方面。经过半年的实习工作，与刚进入公司相比，养成了良好的应当称之为习惯的是：代码规范和记录！好记性不如烂笔头，写代码时的逻辑，冗长代码的作用，bug出现的原因与解决方案，就像学时的标注笔记与错题集。注释使代码容易阅读；记录，简单明了的提示以往陷入的泥潭。 技术App Frame公司内部开发的框架App Frame：使用configTools工具配置bo文件，自动生成java bean和对应value接口，engine类和所需的数据源等配置文件就可以对数据库数据进行存取。配置set文件后，便可以通过封装的ai-table标签展示对应库表的数据，在开发上便捷了许多。 ssm开源框架ssm：在轻量级的ssh框架的基础上，理解起来容易的多了。在项目中，使用MyBatis封装DAO层：entity，DAO（mapper接口），mapper.xml；完成对act表外的自有库表的增删改查操作接口以供service层调用。MyBatis支持自定义SQL，所以对SQL要有一定的熟练度。 Activiti工作流在新需求上，需要及时补充未涉猎的技术，于上次计划学习Activiti工作流和定时计划任务，并利用工作之余进行充电。Activiti框架整合，数据库表的存放，API接口，流程部署，启动、挂起，任务完成等。 Log4j2Log4j2较Log4j性能上有很大的提升，多线程log日志输出，按业务逻辑输出多个日志文件;log4j2引入了插件系统，支持很多已有的日志框架；支持多种方式配置并能够自动重载。 收获 严格区分测试环境/生产环境，避免客户接收到测试相关信息。eg:通过配置文件去配置开关（isTest） 研读官方文档、官方使用手册 日志分析，快速对问题进行定位 生活作为一枚码畜，勉强能靠工资活下来，这边缴着房租，那边又该考虑着有没有房租低点，房东好点的地儿住，省吃俭用，想工资卡里能多留点钱。为梦想，加油 梦想还是要有的，万一见鬼了呢！","categories":[{"name":"bread","slug":"bread","permalink":"http://dannybear.top/categories/bread/"},{"name":"summary","slug":"bread/summary","permalink":"http://dannybear.top/categories/bread/summary/"}],"tags":[{"name":"life","slug":"life","permalink":"http://dannybear.top/tags/life/"},{"name":"summary","slug":"summary","permalink":"http://dannybear.top/tags/summary/"}]},{"title":"hello blog","date":"2017-01-14T14:14:08.000Z","path":"bread/hello/hello-blog/","text":"生命不止，折腾不息！ 向来爱折腾的码畜一枚，blog更是要折腾一番，毕竟自己动手欢乐多，体验私人定制的快感。撰文一篇，记blog就这么开通。 这不是一个教程贴，相信你不愿吃别人咀嚼过的喂食，指引：搭建参考官方文档，准备当然要注册github账户与安装git客户端；hexo建于nodejs，也需要安装nodejs。（又一个好把玩的玩意，造轮子的好工具哦）。也可以通过搜索比较，选取更适合你的博客框架。 曾在多个大众化博客平台留下几篇毛文，丑拒，后无疾而终。本次采用个性化域名 + github pages免费空间，搭载HEXO博客框架，或简洁，或绚丽的主题，或自己开源维护一个，文采与技术兼修。指路人@monsterLin，在他频繁的骚扰下，本站就这么起来了。 让我不厌其繁再说说优点吧： Github pages 域名+免费无限空间，不用折腾云服主机（你会买一辈子云服？） 自定义个性域名也只需加个CNAME，改改DNS就好了。或者再包装一层https，完美 Markdown语法写作，酣畅淋漓，支持latex公式，不用再担心数学公式长的丑 当然很多平台都支持md，支持latex需要装MathJax的插件，使用latex排版整个文章，还是去找出版社吧； 多种博客引擎，支持第三方评论系统， Hexo如官方所言：快速、简洁且高效的博客框架；超快速度，一键部署，丰富的插件 Hexo是由Tommy Chen于2012年（long long ago）造的新轮子。 身為一名無聊高中生的我，ISO 檔一釋出便立刻下載，然而 Windows 8 並沒有符合我的期待。（軟粉不要打我）——Tommy Chen Windows 8 Consumer Preview 試玩（blog） 他在读高中造轮子，我在干啥（？懵逼脸？）。台湾是个理想的国度（没有台独的意思，不要查我水表，水表在屋里），不禁感叹，白活了这么久，现在要重新定义所有。 本站拥抱disqus，blocked状态下可能无法加载评论，科学冲浪，推翻网络柏林墙。 没有绝对理想的heaven，没有绝对的liberty，当然也没有绝对的block。","categories":[{"name":"bread","slug":"bread","permalink":"http://dannybear.top/categories/bread/"},{"name":"hello","slug":"bread/hello","permalink":"http://dannybear.top/categories/bread/hello/"}],"tags":[{"name":"life","slug":"life","permalink":"http://dannybear.top/tags/life/"},{"name":"hexo","slug":"hexo","permalink":"http://dannybear.top/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://dannybear.top/tags/blog/"}]}]